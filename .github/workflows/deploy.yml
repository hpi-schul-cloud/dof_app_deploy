---
name: Deoply Action

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      token:
        required: true
      DEV_VAULT:
        required: true
      DEV_KUBE_CONFIG:
        required: true
      ETHERPAD_API_KEY:
        required: true

jobs:
  create_artifacts_repos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: 
         - schulcloud-server
         - schulcloud-client
         - nuxt-client
         - superhero-dashboard
         - schulcloud-calendar
         - edtrio
         - schulcloud-editor 
         - antivirus_check_service
         - dof_app_deploy
    steps:
      - run: |
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          echo git_ref_name ${{ inputs.branch }}
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/${{ matrix.repos }}
          token: ${{ secrets.token }}
          path: ${{ matrix.repos }}
          fetch-depth: 0
      - run: git checkout ${{ env.git_ref_name }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        continue-on-error: true
      - name: 
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        shell: bash
        run: |
          commit_id=$(git rev-parse HEAD)
          mkdir -pv ansible/group_vars/all
          for i in ./ansible/roles/*; do echo mkdir -pv $i/vars; done
          for i in ./ansible/roles/*; do echo "APP_IMAGE_TAG: $commit_id" >> $i/main.yml; done
      - run: tar -cf ${{ matrix.repos }}.tar ansible
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.repos }}
          path: ${{github.workspace }}/${{ matrix.repos }}/${{ matrix.repos }}.tar
          
  create_artifacts_workspaces:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tennens: [ brb, default, nbc ]
    steps:
      - shell: bash
        id: make_identifier
        run: |
          mkdir -pv ansible/group_vars/${{ matrix.tennens }}
          
          git_ref_name=${{ inputs.branch }}
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          
          temp=$(echo $git_ref_name | sed 's@.*/@@' | tr [A-Z] [a-z] | tr _ - | tr \. -)
          echo "before" $git_ref_name "after" $temp
          echo "##[set-output name=id;]$(echo $temp)"
      - shell: bash
        working-directory: ${{github.workspace }}/ansible/group_vars/${{ matrix.tennens }}
        run: |
          #declare test='${{ steps.make_identifier.outputs.id }}'
          echo "NAMESPACE: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}" > cfg.yml
          echo "DOMAIN: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}.cd.dbildungscloud.dev" >> cfg.yml
      - run: tar -cf ${{ matrix.tennens }}.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.tennens }}
          path: ${{github.workspace }}/${{ matrix.tennens }}.tar
  
  deploy:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - run: tar -cf ansible.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ansible
          path: ${{github.workspace }}/ansible.tar
      - shell: bash
        run: |
          python3 -m pip install openshift
          
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "NOTIFICATION_PLATFORM: testplatform" >> all/node-notification-service.yml
          echo "NOTIFICATION_URI: http://notification-svc:3031" >> all/node-notification-service.yml
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "ETHERPAD_API_KEY: ${{ secrets.ETHERPAD_API_KEY }}" >> all/dof_etherpad.yml
      - name: 1Password
        working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "VAULT: ${{ secrets.DEV_VAULT }}" >> all/dof_deploy.yml
          echo "ONEPASSWORD_OPERATOR_VAULT: ${{ secrets.DEV_VAULT }}" >> all/dof_deploy.yml
          echo "TLS_ENABELD: \"true\"" >> all/dof_deploy.yml
      - run: ansible-galaxy collection install community.kubernetes:1.2.1
      - working-directory: ${{github.workspace }}/ansible/roles/sys
        run: |
          mkdir files
          echo "${{ secrets.DEV_KUBE_CONFIG }}" > files/config
      - run: ansible-playbook ./playbook.yml --inventory-file hosts -e 'ansible_python_interpreter=/usr/bin/python3'
        working-directory: ${{github.workspace }}/ansible
      - working-directory: ${{github.workspace }}/ansible/roles/sys/files
        run: |
          rm -rf  /config
