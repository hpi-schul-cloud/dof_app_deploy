---
name: Deoply Action

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      user_name:
         required: false
         default: hpi-schul-clud-bot
         type: string
      user_email:
         required: false
         default: bot@hpi-schul-cloud.de
         type: string
    secrets:
      token:
        required: true
      DEV_VAULT:
        required: true
      DEV_KUBE_CONFIG:
        required: true
      ETHERPAD_API_KEY:
        required: true
      TOKEN_INVENTORY:
        required: true

jobs:
  create_artifacts_repos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: 
         - schulcloud-server
         - schulcloud-client
         - nuxt-client
         - superhero-dashboard
         - schulcloud-calendar
         - antivirus_check_service
         - dof_app_deploy
    steps:
      - run: |
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          echo git_ref_name ${{ inputs.branch }}
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/${{ matrix.repos }}
          token: ${{ secrets.token }}
          path: ${{ matrix.repos }}
          fetch-depth: 0
      - run: git checkout ${{ env.git_ref_name }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        continue-on-error: true 
      - working-directory: ${{github.workspace }}/${{ matrix.repos }}
        shell: bash
        run: |
          commit_id=$(git rev-parse HEAD)
          mkdir -pv ansible/group_vars/all
          for i in ./ansible/roles/*; do mkdir -pv $i/vars; done
          for i in ./ansible/roles/*; do echo "APP_IMAGE_TAG: $commit_id" >> $i/vars/main.yml; done
          mkdir -pv ansible/host_vars/brb_host
          mkdir -pv ansible/host_vars/default_host
          mkdir -pv ansible/host_vars/nbc_host
          ansible_varname=$(echo ${{ matrix.repos }} | tr [a-z] [A-Z] | tr - _ | tr \. _ | tr [:blank:] _ )
          filename=$(echo ${ansible_varname} | tr [A-Z] [a-z] )
          for i in ./ansible/host_vars/*; do echo "${ansible_varname}_IMAGE_TAG: $commit_id" >> $i/$filename.yml; done
      - run: tar -cf ${{ matrix.repos }}.tar ansible
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.repos }}
          path: ${{github.workspace }}/${{ matrix.repos }}/${{ matrix.repos }}.tar
          
  create_artifacts_workspaces:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tennens: [ brb, default, nbc ]
    steps:
      - shell: bash
        id: make_identifier
        run: |
          mkdir -pv ansible/group_vars/${{ matrix.tennens }}
          
          git_ref_name=${{ inputs.branch }}
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          
          temp=$(echo $git_ref_name | sed 's@.*/@@' | tr [A-Z] [a-z] | tr _ - | tr \. -)
          echo "before" $git_ref_name "after" $temp
          echo "##[set-output name=id;]$(echo $temp)"
      - shell: bash
        working-directory: ${{github.workspace }}/ansible/group_vars/${{ matrix.tennens }}
        run: |
          #declare test='${{ steps.make_identifier.outputs.id }}'
          echo "NAMESPACE: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}" > cfg.yml
          echo "DOMAIN: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}.cd.dbildungscloud.dev" >> cfg.yml
      - run: tar -cf ${{ matrix.tennens }}.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.tennens }}
          path: ${{github.workspace }}/${{ matrix.tennens }}.tar
  
  deploy:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - run: tar -cf ansible.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ansible
          path: ${{github.workspace }}/ansible.tar
      - shell: bash
        run: |
          python3 -m pip install openshift
          
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "NOTIFICATION_PLATFORM: testplatform" >> all/node-notification-service.yml
          echo "NOTIFICATION_URI: http://notification-svc:3031" >> all/node-notification-service.yml
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "ETHERPAD_API_KEY: ${{ secrets.ETHERPAD_API_KEY }}" >> all/dof_etherpad.yml
      - name: 1Password
        working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "VAULT: ${{ secrets.DEV_VAULT }}" >> all/dof_deploy.yml
          echo "ONEPASSWORD_OPERATOR_VAULT: ${{ secrets.DEV_VAULT }}" >> all/dof_deploy.yml
          echo "TLS_ENABELD: \"true\"" >> all/dof_deploy.yml
      - run: ansible-galaxy collection install community.kubernetes:1.2.1
      - working-directory: ${{github.workspace }}/ansible/roles/sys
        run: |
          mkdir files
          echo "${{ secrets.DEV_KUBE_CONFIG }}" > files/config
      - run: ansible-playbook ./playbook.yml --inventory-file hosts -e 'ansible_python_interpreter=/usr/bin/python3'
        working-directory: ${{github.workspace }}/ansible
      - working-directory: ${{github.workspace }}/ansible/roles/sys/files
        run: |
          rm -rf  /config


  inventory:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/cloud_ansible
          token: ${{ secrets.TOKEN_INVENTORY }}
          path: cloud_ansible
          fetch-depth: 0
      - run: |
          git_ref_name=${{ inputs.branch }}
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
      - run: |
         echo "
          cd \$1 
          if grep -q \$2 <<<\$(git ls-remote ); then
              echo found
              git checkout \$2
          else
              echo not found
              git checkout -b \$2
              git push -u origin \$2
          fi
          cd .." > checkout.sh
          chmod +x checkout.sh
      - run: |
         echo "
          cd \$1
          git config user.name ${{ inputs.user_name }}
          git config user.email ${{ inputs.user_email }}
          if ! grep -q \"nothing to commit, working tree clean\" <<<\$(git status ); then
              git add **
              git commit -m\"\$2\" 
              git push --quiet
          fi
          cd .." > push.sh
          chmod +x push.sh
      - name: script to publish roles
        run: |
          ./checkout.sh cloud_ansible $git_ref_name
           cd ansible
          find roles/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf ../cloud_ansible/{} \;
          find roles/ -mindepth 1 -type d -exec mkdir -p ../cloud_ansible/{} \;
          find roles/ -mindepth 1 -type f -exec cp {} ../cloud_ansible/{} \;
          find ./ -maxdepth 1 -name "play*.yml" -type f -exec cp -f {} ../cloud_ansible/ \;
          cd ..
          ./push.sh cloud_ansible "Update Ansible roles for $git_ref_name"
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/autodeployment_inventory
          token: ${{ secrets.TOKEN_INVENTORY }}
          path: autodeployment_inventory
          fetch-depth: 0
      - name: script for the config
        run: |
          ./checkout.sh autodeployment_inventory $git_ref_name
          cd ansible
          find group_vars/ host_vars/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf ../autodeployment_inventory/{} \;
          find group_vars/ host_vars/ -mindepth 1 -type d -exec mkdir -p ../autodeployment_inventory/{} \;
          find group_vars/ host_vars/ -mindepth 1 -type f -exec cp {} ../autodeployment_inventory/{} \;
          find ./ -mindepth 1 -maxdepth 1 -name "host*" -type f -exec cp -f {} ../autodeployment_inventory/ \;
          cd ..
          ./push.sh autodeployment_inventory "Update Ansible inventory for $branch"
    
