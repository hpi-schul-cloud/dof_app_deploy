---
name: Build and push Docker Image

on:
  repository_dispatch:
    types: [dev-deploy]
  workflow_dispatch:
    inputs:
      sc-branch:
        description: 'SC Branch or tag'     
        required: true

jobs:
  create_artifacts_repos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: 
         - node-notification-service
         - dof_etherpad
         - schulcloud-server
         - schulcloud-client
         - nuxt-client
         - superhero-dashboard
         - schulcloud-calendar
         - edtrio
         - schulcloud-editor 
    steps:
      - run: |
          temp=${{ github.event.client_payload.branch }}
          git_ref_name=${temp:-'${{ github.event.inputs.sc-branch }}'}
          echo "git_ref_name=$git_ref_name" >> $GITHUB_ENV
          echo git_ref_name $git_ref_name
          echo "fancyfancy" ${{ env.git_ref_name }}
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/${{ matrix.repos }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ matrix.repos }}
          fetch-depth: 0
      - run: git checkout ${{ env.git_ref_name }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        continue-on-error: true
      - name: 
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        shell: bash
        run: |
          mkdir -pv ansible/group_vars/all
          mkdir -pv ansible/roles/${{ matrix.repos }}/vars
      - working-directory: ${{github.workspace }}/${{ matrix.repos }}
        name: get commit id from HEAD of branch
        shell: bash
        run: |
          echo "##[set-output name=commitid;]$(git rev-parse HEAD)"
        id: commitid_of_head
      - working-directory: ${{github.workspace }}/${{ matrix.repos }}/ansible/roles/${{ matrix.repos }}/vars
        shell: bash
        run: |
          echo "APP_IMAGE_TAG: ${{ steps.commitid_of_head.outputs.commitid }}" >> main.yml
      - run: tar -cf ${{ matrix.repos }}.tar ansible
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.repos }}
          path: ${{github.workspace }}/${{ matrix.repos }}/${{ matrix.repos }}.tar
          
  create_artifacts_workspaces:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tennens: [ brb, nbc ]
    steps:
      - name: SHA Stuf
        shell: bash
        id: make_identifier
        run: |
          mkdir -p ansible/group_vars/${{ matrix.tennens }}
          echo "##[set-output name=id;]$(echo ${{ github.event.client_payload.branch }} | sed 's@.*/@@' | tr [A-Z] [a-z] | tr _ -)"
      - shell: bash
        working-directory: ${{github.workspace }}/ansible/group_vars/${{ matrix.tennens }}
        run: |
          #declare test='${{ steps.make_identifier.outputs.id }}'
          echo "NAMESPACE: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}" > cfg.yml
          echo "DOMAIN: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}.dof.dev.hpi-schul-cloud.org" >> cfg.yml
      - run: tar -cf ${{ matrix.tennens }}.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.tennens }}
          path: ${{github.workspace }}/${{ matrix.tennens }}.tar
  
  deploy:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: git checkout ${{ github.event.client_payload.branch }}
        continue-on-error: true
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - run: tar -cf ansible.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ansible
          path: ${{github.workspace }}/ansible.tar
      - shell: bash
        run: |
          python3 -m pip install --upgrade pip
      - shell: bash
        run: |
          python3 -m pip install ansible openshift
          
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "RABBITMQ_USER: ${{ secrets.DEV_RABBITMQ_USER }}" > all/rabbitmq.yml
          echo "RABBITMQ_PW_HASH: ${{ secrets.DEV_RABBITMQ_PASSWORD_HASH }}" >> all/rabbitmq.yml
          echo "RABBITMQ_PW: ${{ secrets.DEV_RABBITMQ_PASSWORD }}" >> all/rabbitmq.yml
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "ETHERPAD_API_KEY: ${{ secrets.ETHERPAD_API_KEY }}" >> all/dof_etherpad.yml
      - working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "NOTIFICATION_PLATFORM: testplatform" >> all/node-notification-service.yml
          echo "NOTIFICATION_URI: http://notification-svc:3031" >> all/node-notification-service.yml
      - name: 1Password
        working-directory: ${{github.workspace }}/ansible/group_vars
        run: |
          echo "VAULT: ${{ secrets.DEV_VAULTE }}" >> all/dof_deploy.yml
      - run: ansible-galaxy collection install community.kubernetes:1.2.1
      - working-directory: ${{github.workspace }}/ansible/roles/sys
        run: |
          mkdir files
          echo "${{ secrets.DEV_KUBE_CONFIG }}" > files/config
      - run: ansible-playbook ./playbook.yml --inventory-file hosts -e 'ansible_python_interpreter=/usr/bin/python3'
        working-directory: ${{github.workspace }}/ansible
      - working-directory: ${{github.workspace }}/ansible/roles/sys/files
        run: |
          rm -rf  /config
