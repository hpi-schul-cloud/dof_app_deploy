
on:
  push:
    tags:
      - '[0-9]*'
  workflow_dispatch:

jobs:
  process-versions:
    runs-on: ubuntu-latest
    outputs:
      instances: ${{ steps.generate.outputs.instances }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Version Inputs
        id: generate
        run: |
          set -euo pipefail

          # Extract repo mappings from git_repos.yml
          GIT_REPOS_FILE="ansible/group_vars/all/git_repos.yml"
          declare -A REPO_MAPPING
          while IFS=: read -r key value; do
              # Trim whitespaces from key and value
              key_trimmed=$(echo "$key" | xargs)
              value_trimmed=$(echo "$value" | xargs)
              if [[ "$key_trimmed" != "DOF_APP_DEPLOY_REPO_NAME" ]]; then
                  REPO_MAPPING[$key_trimmed]="$value_trimmed"
              fi
          done < "$GIT_REPOS_FILE"
          
          # Find all version.yml files
          VERSION_FILES=(./ansible/host_vars/*/version.yml)
          
          instances_list="[]"
          
          for file in "${VERSION_FILES[@]}"; do
              # Extract instance name from directory name
              instance=$(basename "$(dirname "$file")")
              repos_list=""
          
              while IFS=: read -r key value; do
                  key_trimmed=$(echo "$key" | xargs)
                  value_trimmed=$(echo "$value" | xargs)
          
                  # Convert IMAGE_TAG variable name to REPO_NAME
                  repo_key=${key_trimmed%_IMAGE_TAG}_REPO_NAME
                  if [[ -n "${REPO_MAPPING[$repo_key]}" ]]; then
                      # Construct repo:version format and create repolist separated by semicolon
                      repo_name="hpi-schul-cloud/${REPO_MAPPING[$repo_key]}:$value_trimmed"
                      repos_list+="$repo_name;"
                  fi
              done < "$file"
          
              # Remove trailing semicolon
              repos_list=${repos_list%;}
              
              # Append instance details as JSON object
              instances_list=$(echo "$instances_list" | jq --arg instance "$instance" --arg repos "$repos_list" '. + [{"name": $instance, "repos": $repos}]')
          done
          
          # Wrap the instances list in a JSON object, thats how github likes it
          instances_json=$(echo "{}" | jq --argjson instances "$instances_list" '.instances = $instances')
          echo $instances_json
          # github only likes one line json when it comes to GITHUB_OUTPUT? - ok..
          instances_json=$(echo "$instances_json" | jq -c .)
          echo "instances=$instances_json" >> $GITHUB_OUTPUT

  call-next-action:
    needs: process-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.process-versions.outputs.instances) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Call Funny Action
        run: |
          echo 'matrix.instances: ${{ matrix.instances }}'
          echo 'matrix.instances.name: ${{ matrix.instances.name }}'
          echo 'matrix.instances.repos: ${{ matrix.instances.repos }}'

      - name: summarize sboms
        id: summarize-sboms
        uses: hpi-schul-cloud/sbom-summarizer@54283bdea5819ffbf6bd943c773a2de5e18ec74f
        with:
          filename: dependencies.sbom.json
          repos: ${{ matrix.instances.repos }}

      - name: work with json
        shell: bash
        run: | 
              tee ${{ matrix.instances.name }}-license-summary.json <<< '${{ steps.summarize-sboms.outputs.json }}'
      - name: Upload JSON as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.instances.name }}-license-summary.json
          path: ${{ matrix.instances.name }}-license-summary.json


      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.SVS_PUBLIC_ARTIFACTS_RCLONE_CONFIG }}

      - run: |
              rclone copy ${{ matrix.instances.name }}-license-summary.json svs-public-artifacts:/svs-public-artifacts/${{ github.ref_name }}/${{ matrix.instances.name }}-license-summary.json