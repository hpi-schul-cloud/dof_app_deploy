---
name: Clean Out Branches

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      user_name:
         required: false
         default: hpi-schul-clud-bot
         type: string
      user_email:
         required: false
         default: bot@hpi-schul-cloud.de
         type: string
    secrets:
      token:
        required: true
      DEV_KUBE_CONFIG:
        required: true
      TOKEN_INVENTORY:
        required: true

jobs:
  create_artifacts_repos:
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: 
         - schulcloud-server
         - schulcloud-client
         - nuxt-client
         - superhero-dashboard
         - schulcloud-calendar
         - antivirus_check_service
         - dof_app_deploy
    steps:
      - run: |
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          echo git_ref_name ${{ inputs.branch }}
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/${{ matrix.repos }}
          token: ${{ secrets.token }}
          path: ${{ matrix.repos }}
          fetch-depth: 0
      - run: git checkout ${{ env.git_ref_name }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
      - name: Add Flag for existing branch
        if: ${{ success() }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
        shell: bash
        run: |
          mkdir -pv ansible/group_vars/all
          echo "BRANCH_EXIST: true" > ansible/group_vars/all/${{ matrix.repos }}.yml
      - run: tar -cf ${{ matrix.repos }}.tar ansible
        if: ${{ always() }}
        working-directory: ${{github.workspace }}/${{ matrix.repos }}
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ matrix.repos }}
          path: ${{github.workspace }}/${{ matrix.repos }}/${{ matrix.repos }}.tar
          
  create_artifacts_workspaces:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tennens: [ brb, default, nbc ]
    steps:
      - run: |
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          echo git_ref_name ${{ inputs.branch }}
      - shell: bash
        id: make_identifier
        run: |
          mkdir -pv ansible/group_vars/${{ matrix.tennens }}
          
          temp=$(echo $git_ref_name | sed 's@.*/@@' | tr [A-Z] [a-z] | tr _ - | tr \. -)
          echo "before" $git_ref_name "after" $temp
          echo "##[set-output name=id;]$(echo $temp)"
      - shell: bash
        working-directory: ${{github.workspace }}/ansible/group_vars/${{ matrix.tennens }}
        run: |
          #declare test='${{ steps.make_identifier.outputs.id }}'
          echo "NAMESPACE: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}" > cfg.yml
          echo "DOMAIN: ${{ matrix.tennens }}-${{ steps.make_identifier.outputs.id }}.cd.dbildungscloud.dev" >> cfg.yml
      - run: tar -cf ${{ matrix.tennens }}.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.tennens }}
          path: ${{github.workspace }}/${{ matrix.tennens }}.tar
  
  clean_cluster:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - run: tar -cf ansible.tar ansible
      - uses: actions/upload-artifact@v2
        with:
          name: ansible
          path: ${{github.workspace }}/ansible.tar
      - shell: bash
        run: |
          python3 -m pip install openshift
          
      - run: ansible-galaxy collection install community.kubernetes:1.2.1
      - working-directory: ${{github.workspace }}/ansible/roles/clean
        run: |
          mkdir files
          echo "${{ secrets.DEV_KUBE_CONFIG }}" > files/config
      - run: ansible-playbook ./playbook_clean.yml --inventory-file hosts -e 'ansible_python_interpreter=/usr/bin/python3'
        working-directory: ${{github.workspace }}/ansible
      - working-directory: ${{github.workspace }}/ansible/roles/clean/files
        run: |
          rm -rf  /config
          
  clean_repo:
    needs: 
      - create_artifacts_repos
      - create_artifacts_workspaces
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: mv */*.tar ./
      - run: find -name "*.tar" -exec tar -xf {} \;
      - run: tar -cf ansible.tar ansible
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/cloud_ansible
          token: ${{ secrets.TOKEN_INVENTORY }}
          path: cloud_ansible
          fetch-depth: 0
      - uses: actions/checkout@v2
        with:
          repository: hpi-schul-cloud/autodeployment_inventory
          token: ${{ secrets.TOKEN_INVENTORY }}
          path: autodeployment_inventory
          fetch-depth: 0
      - run: |
          git_ref_name=${{ inputs.branch }}
          echo "git_ref_name=${{ inputs.branch }}" >> $GITHUB_ENV
          
          delete() {
           cd $1 
           git config user.name ${{ inputs.user_name }}
           git config user.email ${{ inputs.user_email }}
           if grep -q $2 <<<$(git ls-remote ); then
               echo "found"
               git push origin --delete $2
           fi
          }
          
          if [ $(find group_vars/all -name "*.yml" -type f -exec grep "BRANCH_EXIST: true" {} -l \; | grep "all" -wc) -eq "0" ]; then
            delete cloud_ansible $git_ref_name
            delete autodeployment_inventory $git_ref_name
          fi

