- name: Check if secret with database credentials already exists
  kubernetes.core.k8s_info:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    kind: Secret
    name: "pg-erwinidm-secret"
  register: db_secret_present
  when: WITH_ERWINIDM and WITH_BRANCH_POSTGRES_DB_MANAGEMENT

- name: Create Secret for the database (if not existing)
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: secret-database.yml.j2
  when: WITH_ERWINIDM and WITH_BRANCH_POSTGRES_DB_MANAGEMENT and db_secret_present.resources|length == 0

- name: Create ConfigMap with database configuration script
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: configmap-database-init.yml.j2
    apply: yes
  when: WITH_ERWINIDM and WITH_BRANCH_POSTGRES_DB_MANAGEMENT

- name: Create/execute database configuration script
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config 
    namespace: "{{ NAMESPACE }}"
    template: job-database-init.yml.j2
  when: WITH_ERWINIDM and WITH_BRANCH_POSTGRES_DB_MANAGEMENT

- name: Service
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: svc.yml.j2
  when: WITH_ERWINIDM

- name: remove Service
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: v1
    kind: Service
    name: erwinidm-svc
    state: absent
  when: not WITH_ERWINIDM

- name: Add or Update Configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: configmap.yml.j2
    apply: yes
    force: true
  when: WITH_ERWINIDM

- name: remove Configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: v1
    kind: ConfigMap
    name: erwinidm-configmap
    state: absent
  when: not WITH_ERWINIDM

- name: Secret by 1Password
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: onepassword.yml.j2
  when: WITH_ERWINIDM and (ONEPASSWORD_OPERATOR is defined and ONEPASSWORD_OPERATOR|bool)

- name: remove Secret by 1Password
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: onepassword.com/v1
    kind: OnePasswordItem
    name: erwinidm-secret
    state: absent
  when: not WITH_ERWINIDM and (ONEPASSWORD_OPERATOR is defined and ONEPASSWORD_OPERATOR|bool)

- name: Deployment
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: deployment.yml.j2
  when: WITH_ERWINIDM

- name: remove Deployment
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: apps/v1
    kind: Deployment
    name: erwinidm-deployment
    state: absent
  when: not WITH_ERWINIDM

- name: Ingress
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: ingress.yml.j2
  when: WITH_ERWINIDM

- name: remove Ingress
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: networking.k8s.io/v1
    kind: Ingress
    name: "{{ NAMESPACE }}-erwinidm-ingress"
    state: absent
  when: not WITH_ERWINIDM

- name: Admin Ingress Secret
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: onepassword.yml.j2
  when: WITH_ERWINIDM and (ONEPASSWORD_OPERATOR is defined and ONEPASSWORD_OPERATOR|bool)

- name: remove Admin Ingress Secret
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: onepassword.com/v1
    kind: OnePasswordItem
    name: "{{ ERWINIDM_ADMIN_TLS_AUTH_SECRET }}"
    state: absent
  when: not WITH_ERWINIDM and (ONEPASSWORD_OPERATOR is defined and ONEPASSWORD_OPERATOR|bool)

# - name: Admin Ingress
#   kubernetes.core.k8s:
#     kubeconfig: ~/.kube/config
#     namespace: "{{ NAMESPACE }}"
#     template: admin-ingress.yml.j2
#   when: WITH_ERWINIDM

# - name: remove Admin Ingress
#   kubernetes.core.k8s:
#     kubeconfig: ~/.kube/config
#     namespace: "{{ NAMESPACE }}"
#     api_version: networking.k8s.io/v1
#     kind: Ingress
#     name: "{{ NAMESPACE }}-erwinidm-admin-ingress"
#     state: absent
#   when: not WITH_ERWINIDM

- name: Service Monitor
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: templates/erwinidm-svc-monitor.yml.j2
  when: WITH_ERWINIDM and (ERWINIDM_SERVICE_MONITOR is defined and ERWINIDM_SERVICE_MONITOR)

- name: remove Service Monitor
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: monitoring-prometheus-sc-erwinidm-svc
    state: absent
  when: not WITH_ERWINIDM and (ERWINIDM_SERVICE_MONITOR is defined and ERWINIDM_SERVICE_MONITOR)

- name: Add or Update init scripts Configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: configmap-init.yml.j2
    apply: yes
  when: WITH_ERWINIDM

- name: remove init scripts Configmap
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: v1
    kind: ConfigMap
    name: erwinidm-init-file
    state: absent
  when: not WITH_ERWINIDM

- name: Test if Init Job exit
  kubernetes.core.k8s_info:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    api_version: batch/v1
    kind: Job
    name: erwinidm-init-job
  register: erwinidm_init_job_present

- name: Init Job
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    template: init_job.yml.j2
  when: 
  - WITH_ERWINIDM
  - erwinidm_init_job_present.resources|length == 0

- name: Remove Init Job
  kubernetes.core.k8s:
    kubeconfig: ~/.kube/config
    namespace: "{{ NAMESPACE }}"
    state: absent
    api_version: batch/v1
    kind: Job
    name: erwinidm-init-job
  when: not WITH_ERWINIDM
