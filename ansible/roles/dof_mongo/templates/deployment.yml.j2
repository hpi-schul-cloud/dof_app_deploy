---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: {{ NAMESPACE }}
{% if ANNOTATIONS is defined and ANNOTATIONS|bool %}
  annotations:
{% if RELOADER is defined and RELOADER|bool %}
    reloader.stakater.com/auto: "true"
{% endif %}
{% endif %}
  labels:
    app: mongo
    app.kubernetes.io/part-of: schulcloud-verbund
    app.kubernetes.io/version: "{{ MONGO_IMAGE_TAG }}"
    app.kubernetes.io/name: mongo
    app.kubernetes.io/component: database
    app.kubernetes.io/managed-by: ansible
    git.branch: {{ DOF_APP_DEPLOY_BRANCH_NAME }}
    git.repo: {{ DOF_APP_DEPLOY_REPO_NAME }}
spec:
  replicas: {{ MONGO_REPLICAS|default(1, true) }}
  strategy:
    type: Recreate
  revisionHistoryLimit: 4
  paused: false
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
        app.kubernetes.io/part-of: schulcloud-verbund
        app.kubernetes.io/version: "{{ MONGO_IMAGE_TAG }}"
        app.kubernetes.io/name: mongo
        app.kubernetes.io/component: database
        app.kubernetes.io/managed-by: ansible
        git.repo: {{ DOF_APP_DEPLOY_REPO_NAME }}
      annotations:
        configmapHash: ""
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
      containers:
      - name: mongo
        image: {{ MONGO_IMAGE_NAME }}:{{ MONGO_IMAGE_TAG }}
        imagePullPolicy: IfNotPresent
        args: ["--replSet", "rs0", "--oplogSize", "10"]
        ports:
        - containerPort: 27017
          name: mongo
          protocol: TCP
        volumeMounts:
        - name: mongodb-data-pv
          mountPath: /data/db
          readOnly: false
        resources:
          limits:
            cpu: {{ MONGO_CPU_LIMITS|default("2000m", true) }}
            memory: {{ MONGO_MEMORY_LIMITS|default("2Gi", true) }}
          requests:
            cpu: {{ MONGO_CPU_REQUESTS|default("100m", true) }}
            memory: {{ MONGO_MEMORY_REQUESTS|default("512Mi", true) }}
      - name: mongo-exporter
        image: {{ MONGO_EXPORTER_IMAGE_NAME }}:{{ MONGO_EXPORTER_IMAGE_TAG }}
        imagePullPolicy: IfNotPresent
        args: ["--compatible-mode", "--collect-all" ]
        envFrom:
        - secretRef:
            name: mongo-secret
        ports:
        - containerPort: 9216
          name: mongo-exporter
          protocol: TCP
        resources:
          limits:
            cpu: {{ MONGO_EXPORTER_CPU_LIMITS|default("2000m", true) }}
            memory: {{ MONGO_EXPORTER_MEMORY_LIMITS|default("1Gi", true) }}
          requests:
            cpu: {{ MONGO_EXPORTER_CPU_REQUESTS|default("100m", true) }}
            memory: {{ MONGO_EXPORTER_MEMORY_REQUESTS|default("64Mi", true) }}
      volumes:
      - name: mongodb-data-pv
        persistentVolumeClaim:
          claimName: mongo-pvc
{% if AFFINITY_ENABLE is defined and AFFINITY_ENABLE|bool %}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 9
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/part-of
                  operator: In
                  values:
                  - schulcloud-verbund
              topologyKey: "kubernetes.io/hostname"
              namespaceSelector: {}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
{% if ANIT_AFFINITY_NODEPOOL_ENABLE is defined and ANIT_AFFINITY_NODEPOOL_ENABLE|bool %}
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mongo
              topologyKey: {{ ANIT_AFFINITY_NODEPOOL_TOPOLOGY_KEY }}
{% endif %}
          - weight: 20
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mongo
              topologyKey: "topology.kubernetes.io/zone"
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mongo
              topologyKey: "kubernetes.io/hostname"
              namespaceSelector: {}
{% endif %}
